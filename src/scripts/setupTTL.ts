import { MongoClient } from 'mongodb';
import * as dotenv from 'dotenv';
import * as path from 'path';

// Carrega vari√°veis de ambiente
dotenv.config({ path: path.join(process.cwd(), '.env.local') });
dotenv.config({ path: path.join(process.cwd(), '.env') });

async function setupTTLIndex() {
  const url = process.env.DATABASE_URL;
  
  if (!url) {
    console.error('‚ùå DATABASE_URL n√£o encontrada');
    console.log('Certifique-se de que o arquivo .env ou .env.local existe com a vari√°vel DATABASE_URL');
    return;
  }

  const client = new MongoClient(url);

  try {
    console.log('üîó Conectando ao MongoDB...');
    await client.connect();
    
    const db = client.db();
    
    // Listar todas as cole√ß√µes para encontrar a correta
    console.log('üìã Verificando cole√ß√µes existentes...');
    const collections = await db.listCollections().toArray();
    const collectionNames = collections.map(c => c.name);
    console.log('Cole√ß√µes encontradas:', collectionNames);
    
    // Verificar se existe cole√ß√£o Cart (mai√∫scula ou min√∫scula)
    const cartCollectionName = collectionNames.find(name => 
      name.toLowerCase() === 'cart' || name === 'Cart'
    );
    
    if (!cartCollectionName) {
      console.log('‚ö†Ô∏è Cole√ß√£o Cart n√£o encontrada. Criando...');
      // Se n√£o existe, vamos usar 'Cart' como padr√£o
      await db.collection('Cart').insertOne({
        test: true,
        expireAt: new Date(Date.now() + 1000) // Expira em 1 segundo
      });
      console.log('‚úÖ Cole√ß√£o Cart criada temporariamente');
      // Remove o documento de teste
      await db.collection('Cart').deleteOne({ test: true });
    }
    
    const finalCollectionName = cartCollectionName || 'Cart';
    console.log(`üì¶ Usando cole√ß√£o: ${finalCollectionName}`);
    
    // Verificar √≠ndices existentes
    console.log('üîç Verificando √≠ndices existentes...');
    const indexes = await db.collection(finalCollectionName).listIndexes().toArray();
    console.log('√çndices atuais:', indexes.map(i => ({ name: i.name, key: i.key, expireAfterSeconds: i.expireAfterSeconds })));
    
    // Verificar se j√° existe √≠ndice TTL no campo expireAt
    const existingTTLIndex = indexes.find(index => 
      index.key && index.key.expireAt === 1
    );
    
    if (existingTTLIndex) {
      console.log(`üìç √çndice existente encontrado: ${existingTTLIndex.name}`);
      console.log(`‚è∞ expireAfterSeconds atual: ${existingTTLIndex.expireAfterSeconds}`);
      
      // Se n√£o tem expireAfterSeconds ou n√£o est√° configurado corretamente
      if (existingTTLIndex.expireAfterSeconds === undefined) {
        console.log('‚ùå √çndice TTL est√° incorreto (sem expireAfterSeconds)');
        console.log('üîÑ Removendo √≠ndice incorreto...');
        await db.collection(finalCollectionName).dropIndex(existingTTLIndex.name);
        console.log('‚úÖ √çndice incorreto removido');
      } else if (existingTTLIndex.expireAfterSeconds === 0) {
        console.log('‚úÖ √çndice TTL j√° configurado corretamente');
        return; // Sair se j√° est√° correto
      }
    }
    
    // Criar novo √≠ndice TTL
    console.log('üÜï Criando novo √≠ndice TTL...');
    const result = await db.collection(finalCollectionName).createIndex(
      { expireAt: 1 },
      { 
        expireAfterSeconds: 0,
        name: 'cart_ttl_index'
      }
    );
    
    console.log('‚úÖ Novo √≠ndice TTL criado:', result);
    
    // Verificar se foi criado corretamente
    const newIndexes = await db.collection(finalCollectionName).listIndexes().toArray();
    const newTTLIndex = newIndexes.find(i => i.name === 'cart_ttl_index');
    
    if (newTTLIndex) {
      console.log('üéâ √çndice TTL configurado com sucesso!');
      console.log('üìù Detalhes:', {
        name: newTTLIndex.name,
        key: newTTLIndex.key,
        expireAfterSeconds: newTTLIndex.expireAfterSeconds
      });
      console.log('‚ö° Os carrinhos ser√£o automaticamente removidos quando expireAt for atingido.');
      
      // Verificar documentos que deveriam ter expirado
      const now = new Date();
      const expiredDocs = await db.collection(finalCollectionName).find({
        expireAt: { $lt: now }
      }).toArray();
      
      if (expiredDocs.length > 0) {
        console.log(`‚ö†Ô∏è  Encontrados ${expiredDocs.length} documentos que j√° deveriam ter expirado`);
        console.log('üîÑ O MongoDB pode levar at√© 60 segundos para processar a expira√ß√£o ap√≥s criar o √≠ndice');
      }
    } else {
      console.error('‚ùå Falha ao criar √≠ndice TTL');
    }
    
  } catch (error: any) {
    if (error.code === 85) {
      console.log('‚ö†Ô∏è √çndice TTL j√° existe com nome diferente');
    } else {
      console.error('‚ùå Erro ao configurar √≠ndice TTL:', error);
    }
  } finally {
    await client.close();
    console.log('üîó Conex√£o MongoDB fechada');
  }
}

// Executa apenas se o script for chamado diretamente
if (require.main === module) {
  setupTTLIndex();
}

export { setupTTLIndex };
