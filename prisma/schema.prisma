model PushSubscription {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  endpoint  String   @unique
  keys      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String         @id @default(auto()) @map("_id") @db.ObjectId
  name                     String
  email                    String         @unique
  password                 String?
  role                     String         @default("user")
  active                   Boolean        @default(true)
  telefone                 String?
  verificationToken        String?
  verificationTokenExpires DateTime?
  resetToken               String?
  resetTokenExpires        DateTime?
  enderecos                Endereco[]     @relation("UserEnderecos")
  passwordReset            PasswordReset?
  totpSecret               String?
  provider                 String?
  carts                    Cart[]        
  orders                   Order[]
}

model Product {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  price             Float
  priceOld          Float?
  active            Boolean           @default(true)
  onSale            Boolean           @default(false)
  destaque          Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  brandId           String            @db.ObjectId
  brand             Brand             @relation(fields: [brandId], references: [id])
  categories        ProductCategory[]
  imagePrimary      String?
  imagesSecondary   String[]
  features          String?
  variants          ProductVariant[]
  promotionDeadline DateTime?
  cartItems         CartItem[]        
  
  // Dimensões e peso para cálculo de frete
  width             Float?            @default(11) 
  height            Float?            @default(11) 
  length            Float?            @default(17) 
  weight            Float?            @default(3)  
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  logo        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Category {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  products    ProductCategory[]
}

model ProductCategory {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  productId  String    @db.ObjectId
  categoryId String?   @db.ObjectId
  product    Product   @relation(fields: [productId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
}

model Stock {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int            @default(0)
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  variantId String         @unique @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Color {
  id       String           @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  hexCode  String           @unique
  variants ProductVariant[]
}

model ProductVariant {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  colorId   String  @db.ObjectId
  stock     Stock?  @relation()
  product   Product @relation(fields: [productId], references: [id])
  color     Color   @relation(fields: [colorId], references: [id])

  cartItems CartItem[]  
}

model config {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String?
  url       String?
  type      String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Faq {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  question  String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  active    Boolean  @default(true)
  alt       String
  link      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Endereco {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  cep         String
  logradouro  String
  numero      String
  complemento String?
  bairro      String
  cidade      String
  estado      String
  pais        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  user        User     @relation("UserEnderecos", fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model InstaEmbed {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  clientId  String
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @unique
  productName String
  count       Int      @default(0)
  firstView   DateTime
  lastView    DateTime
}

model Cart {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  sessionId   String?   
  userId      String?   @db.ObjectId 
  user        User?     @relation(fields: [userId], references: [id])
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  // TTL: Campo para controle de expiração - será setado na aplicação
  expireAt    DateTime  @default(now()) @map("expireAt")

  @@index([sessionId])
  @@index([userId])
  @@index([expireAt], map: "ttl_index")
}

model CartItem {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  cartId            String          @db.ObjectId
  cart              Cart            @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId         String          @db.ObjectId
  product           Product         @relation(fields: [productId], references: [id])
  productVariantId  String?         @db.ObjectId
  productVariant    ProductVariant? @relation(fields: [productVariantId], references: [id])
  quantity          Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([cartId, productId, productVariantId])
}

// Pedidos
model Order {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              User         @relation(fields: [userId], references: [id])
  cartId            String       @db.ObjectId
  items             OrderItem[]
  subtotal          Float
  shippingPrice     Float        @default(0)
  total             Float
  status            String       @default("pending") // pending, paid, cancelled, failed, refunded
  preferenceId      String?      // Mercado Pago preference id
  shippingServiceId String?
  shippingPostalCode String?
  shippingSig       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([userId])
  @@index([status])
}

model OrderItem {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String   @db.ObjectId
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId        String   @db.ObjectId
  productVariantId String?  @db.ObjectId
  name             String
  unitPrice        Float
  quantity         Int
  imageUrl         String?
}

// Eventos de Webhook para idempotência e auditoria
model WebhookEvent {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  provider      String
  topic         String
  externalId    String
  requestId     String?
  signature     String?
  payload       Json?
  orderId       String?  @db.ObjectId
  statusApplied String?
  createdAt     DateTime @default(now())
  processedAt   DateTime?

  @@unique([provider, topic, externalId])
}
